#ifndef __TARAOS_H
#define __TARAOS_H

#include "IO.h"
#include "screen.h"
#include <stdint.h>


	// general definitons //////////////////////

    #define NULL 0
	
	//////////////////////////////////////////////
	
	// function prototypes;
	int strlen(char *s);
	void* memset(void* ptr, int value, int num) ;
	void memcpy(void *dest, void *src, int n) ;
	//////////////////////////////////////////////
	
	
    
    //Video//////////////////////////////////////////
    //Definitions of Video constants

    #define __VIDMEM__ 0xfd000000
    #define __DEFAULT_WOB__ 0x0f

	struct _vbe_info_structure
	{
		char signature[4];	// must be "VESA" to indicate valid VBE support
		uint16_t version;			// VBE version; high byte is major version, low byte is minor version
		uint32_t oem;			// segment:offset pointer to OEM
		uint32_t capabilities;		// bitfield that describes card capabilities
		uint32_t video_modes;		// segment:offset pointer to list of supported video modes
		uint16_t video_memory;		// amount of video memory in 64KB blocks
		uint16_t software_rev;		// software revision
		uint32_t vendor;			// segment:offset to card vendor string
		uint32_t product_name;		// segment:offset to card model name
		uint32_t product_rev;		// segment:offset pointer to product revision
		char reserved[222];		// reserved for future expansion
		char oem_data[256];		// OEM BIOSes store their strings in this area
	} __attribute__ ((packed));
	
	extern struct vbe_info_structure1;
	
    void set_background(int color)
    {
        fill_rect((char*)__VIDMEM__,0,1280,0,1024,color); 
    }

	// Font değişecek sadece test
	char Default_T_font[] = 
	{
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xDA, 0x02, 0x80, 0x82, 0x02, 0x80, 0x82, 0x02, 0x80, 0xB6, 0x00, 0x00, 0x00, 0x00, 		
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 
		0x18, 0x18, 0x7C, 0xC6, 0xC2, 0xC0, 0x7C, 0x06, 0x06, 0x86, 0xC6, 0x7C, 0x18, 0x18, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0xC2, 0xC6, 0x0C, 0x18, 0x30, 0x60, 0xC6, 0x86, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x30, 0x30, 0x30, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xD6, 0xD6, 0xC6, 0xC6, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x7C, 0xC6, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x7C, 0xC6, 0x06, 0x06, 0x3C, 0x06, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x0C, 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x0C, 0x0C, 0x1E, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xFE, 0xC0, 0xC0, 0xC0, 0xFC, 0x06, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x38, 0x60, 0xC0, 0xC0, 0xFC, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xFE, 0xC6, 0x06, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x06, 0x06, 0x0C, 0x78, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x0C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xDE, 0xDE, 0xDE, 0xDC, 0xC0, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x66, 0xFC, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0, 0xC0, 0xC2, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xF8, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xDE, 0xC6, 0xC6, 0x66, 0x3A, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xE6, 0x66, 0x66, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xF0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xC6, 0xE6, 0xF6, 0xFE, 0xDE, 0xCE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xDE, 0x7C, 0x0C, 0x0E, 0x00, 0x00, 
		0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x60, 0x38, 0x0C, 0x06, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x7E, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xD6, 0xD6, 0xFE, 0xEE, 0x6C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xC6, 0xC6, 0x6C, 0x7C, 0x38, 0x38, 0x7C, 0x6C, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xFE, 0xC6, 0x86, 0x0C, 0x18, 0x30, 0x60, 0xC2, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0x0E, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 
		0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xE0, 0x60, 0x60, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x1C, 0x0C, 0x0C, 0x3C, 0x6C, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x38, 0x6C, 0x64, 0x60, 0xF0, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xCC, 0x78, 0x00, 
		0x00, 0x00, 0xE0, 0x60, 0x60, 0x6C, 0x76, 0x66, 0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x06, 0x06, 0x00, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C, 0x00, 
		0x00, 0x00, 0xE0, 0x60, 0x60, 0x66, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0xFE, 0xD6, 0xD6, 0xD6, 0xD6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0x0C, 0x1E, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0x60, 0x38, 0x0C, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x10, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xD6, 0xD6, 0xD6, 0xFE, 0x6C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x38, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0xF8, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xCC, 0x18, 0x30, 0x60, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x0E, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0E, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x18, 0x18, 0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x38, 0x6C, 0x64, 0x60, 0xF0, 0x60, 0x60, 0x60, 0x60, 0xE6, 0xFC, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x66, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x7C, 0xC6, 0x60, 0x38, 0x6C, 0xC6, 0xC6, 0x6C, 0x38, 0x0C, 0xC6, 0x7C, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x3C, 0x42, 0x99, 0xA5, 0xA1, 0xA1, 0xA5, 0x99, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x3C, 0x6C, 0x6C, 0x3E, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6C, 0xD8, 0x6C, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x38, 0x44, 0xBA, 0xB2, 0xAA, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x70, 0xD8, 0x30, 0x60, 0xC8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x70, 0xD8, 0x30, 0x18, 0xD8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF6, 0xC0, 0xC0, 0xC0, 0x00, 
		0x00, 0x00, 0x7F, 0xDB, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0C, 0x38, 0x00, 
		0x00, 0x30, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x6C, 0x36, 0x6C, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0xC0, 0xC0, 0xC2, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xCE, 0x9E, 0x3E, 0x06, 0x06, 0x00, 0x00, 
		0x00, 0xC0, 0xC0, 0xC2, 0xC6, 0xCC, 0x18, 0x30, 0x60, 0xDC, 0x86, 0x0C, 0x18, 0x3E, 0x00, 0x00, 
		0x00, 0xE0, 0x30, 0x62, 0x36, 0xEC, 0x18, 0x30, 0x66, 0xCE, 0x9E, 0x3E, 0x06, 0x06, 0x00, 0x00, 
		0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xC0, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x60, 0x30, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
		0x0C, 0x18, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
		0x10, 0x38, 0x6C, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
		0x76, 0xDC, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
		0x6C, 0x6C, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
		0x38, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x3E, 0x6C, 0xCC, 0xCC, 0xFE, 0xCC, 0xCC, 0xCC, 0xCC, 0xCE, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0, 0xC0, 0xC2, 0x66, 0x3C, 0x18, 0x0C, 0x38, 0x00,
		0x30, 0x18, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00, 
		0x0C, 0x18, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00, 
		0x10, 0x38, 0x44, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00,
		0x6C, 0x6C, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00, 
		0x30, 0x18, 0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x0C, 0x18, 0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x18, 0x3C, 0x42, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x66, 0x66, 0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xF8, 0x6C, 0x66, 0x66, 0xF6, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00, 0x00, 0x00, 0x00, 
		0x76, 0xDC, 0x00, 0xC6, 0xE6, 0xF6, 0xFE, 0xDE, 0xCE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00, 
		0x60, 0x30, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x0C, 0x18, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x10, 0x38, 0x44, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x76, 0xDC, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x6C, 0x6C, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x7A, 0xC4, 0xCE, 0xCE, 0xD6, 0xD6, 0xE6, 0xE6, 0x46, 0xBC, 0x00, 0x00, 0x00, 0x00, 
		0x60, 0x30, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x0C, 0x18, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x10, 0x38, 0x44, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x6C, 0x6C, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x0C, 0x18, 0x00, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xF0, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x6C, 0x66, 0x66, 0x66, 0x66, 0xEC, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x60, 0x30, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x18, 0x30, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x10, 0x38, 0x6C, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x76, 0xDC, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x6C, 0x6C, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x38, 0x6C, 0x38, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x76, 0x36, 0x7E, 0xD8, 0xD8, 0x6E, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC0, 0xC0, 0xC6, 0x7C, 0x18, 0x0C, 0x38, 0x00, 
		0x00, 0x00, 0x60, 0x30, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x0C, 0x18, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x10, 0x38, 0x6C, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x6C, 0x6C, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x0C, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x10, 0x38, 0x6C, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x76, 0x1C, 0x3C, 0x06, 0x7E, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x76, 0xDC, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x60, 0x30, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x0C, 0x18, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x10, 0x38, 0x6C, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x76, 0xDC, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x6C, 0x6C, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7E, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x7A, 0xC4, 0xCE, 0xD6, 0xE6, 0x46, 0xBC, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x60, 0x30, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x18, 0x30, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x10, 0x38, 0x6C, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0xCC, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x0C, 0x18, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0xF8, 0x00, 
		0x00, 0x00, 0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00, 
		0x00, 0x00, 0x6C, 0x6C, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0xF8, 0x00
	};
	
		
	
	unsigned char *font = Default_T_font;
	
	void drawchar(unsigned char c, int x, int y, int fgcolor, int bgcolor)
	{
		
		int cx,cy;
		int mask[8]={128,64,32,16,8,4,2,1};
		unsigned char *gylph=font+(int)c*16;
	 
		for(cy=0;cy<16;cy++){
			for(cx=0;cx<8;cx ++){
				putpixel((char*)__VIDMEM__,x+cx,y+cy-12,mask[cx]&gylph[cy]?fgcolor:bgcolor);
			}
		}
	}		
	
	#define len(x) sizeof(x)/sizeof(x[0])
	void set_background_with_pixel_buffer(char pixel_buffer[])
	{
		
			unsigned char* screen = (unsigned char*)__VIDMEM__;
			for(int i = 0;i < len(pixel_buffer); i+=3)
			{
				screen[i] = pixel_buffer[i];
			}
		
	}
	
	void drawstring(unsigned char *str, int x, int y, int fgcolor, int bgcolor)
	{
		int cx,cy;
			int mask[8]={128,64,32,16,8,4,2,1};
			unsigned char *gylph;
		for(int t = 0; t < strlen(str); t++)
		{
			
			gylph=font+(int)str[t]*16;
		 
			for(cy=0;cy<16;cy++){
				for(cx=0;cx<8;cx++){
					putpixel((unsigned char*)__VIDMEM__,x+cx,y+cy-12,mask[cx]&gylph[cy]?fgcolor:bgcolor);
				}
			}
			x += 8;
		}
		
	}
	// Sub Cat.: Cursor
	
	struct TCursor
	{
		int x;
		int y;
	}__attribute__((packed));
	
	struct TCursor DTCursor;
	
	void init_DTCursor()
	{
		DTCursor.x = 0;
		DTCursor.y = 16 ;
	}
	void set_DTCursor(int xx, int yy)
	{
		DTCursor.x = xx;
		DTCursor.y = yy;
	}
	
	//
	void printf(unsigned char *str, int fgcolor, int bgcolor) //bu değişecek daha yeni şeyler eklenecek
	{
		
		drawstring(str,DTCursor.x,DTCursor.y,fgcolor,bgcolor);
		
		if(DTCursor.x > 1280)
			set_DTCursor(0,DTCursor.y+16);
		else
			set_DTCursor(DTCursor.x+strlen(str)*8,DTCursor.y);
	}
	
	
	///////////////////////////////////////////
	
    //Keyboard
    //Definition of Keyboard Driver constants

    #define __STATUS_PORT__ 0x64
    #define __DATA_PORT__ 0x60

	
	void keyboard_wait_until_done()
	{
		char c = inb(0x64);
		if(!c & 0x01) keyboard_wait_until_done();
	}
	
	unsigned char MapScancodeToAscii(unsigned Scancode);
	
	int wait_key_var = 0; // bu geçici
	unsigned char wait_key() //bu değişecek
	{
		wait_key_var = 0;
		while(wait_key_var == 0)
		{}
		return MapScancodeToAscii(inb(0x60));
	}
	
	
	
	
	
	
	///////////////////////////////////////

	// String and Memory //////////////////
	
	void swap(char *x, char *y) {
		char t = *x; *x = *y; *y = t;
	}

	char* reverse(char *buffer, int i, int j)
	{
		while (i < j)
			swap(&buffer[i++], &buffer[j--]);

		return buffer;
	}

	int abs(int v) 
	{
	  return v * ( (v<0) * (-1) + (v>0));
	  // simpler: v * ((v>0) - (v<0))   thanks Jens
	}
	
	// Iterative function to implement itoa() function in C
	char* itoa(int value, char* buffer, int base)
	{
		// invalid input
		if (base < 2 || base > 32)
			return buffer;

		// consider absolute value of number
		
		

		int n = abs(value);

		int i = 0;
		while (n)
		{
			int r = n % base;

			if (r >= 10) 
				buffer[i++] = 65 + (r - 10);
			else
				buffer[i++] = 48 + r;

			n = n / base;
		}

		// if number is 0
		if (i == 0)
			buffer[i++] = '0';

		// If base is 10 and value is negative, the resulting string 
		// is preceded with a minus sign (-)
		// With any other base, value is always considered unsigned
		if (value < 0 && base == 10)
			buffer[i++] = '-';

		buffer[i] = '\0'; // null terminate string

		// reverse the string and return it
		return reverse(buffer, 0, i - 1);
	}
	
	void memcpy(void *dest, void *src, int n) 
	{ 
	   // Typecast src and dest addresses to (char *) 
	   char *csrc = (char *)src; 
	   char *cdest = (char *)dest; 
	  
	   // Copy contents of src[] to dest[] 
	   for (int i=0; i<n; i++) 
		   cdest[i] = csrc[i]; 
	} 
	
    void* memset(void* ptr, int value, int num) 
    { 
       unsigned char* ptr_byte = (unsigned char*)ptr;

       for (int i = 0; i < num; ptr_byte[i] = (unsigned char)value, i++);   
       return ptr;
    }

    int strlen(char *s)
    {
        char *p = s;
        while (*p != '\0')
            ++p;
        return p - s; 
    }

	
    int strcmp(char string1[], char string2[] )
    {
        for (int i = 0; ; i++)
        {
            if (string1[i] != string2[i])
            {
                return string1[i] < string2[i] ? -1 : 1;
            }
            if (string1[i] == '\0')
            {
                return 0;
            }
        }
    }

    unsigned char MapScancodeToAscii(unsigned Scancode)
    {
        unsigned char ScancodeTabel[] = {
            '\0',       
            0x27,       //
            '1',
            '2',
            '3',
            '4',
            '5',
            '6',
            '7',
            '8',
            '9',
            '0',
            '-',
            '=',
			0x8,
            0x9,
            'q',
            'w',
            'e',
            'r',
            't',
            'y',
            'u',
            'i',
            'o',
            'p',
            '[',
            ']',
            0x10,
			'\0', // L Caps Lock
            'a',
            's',
            'd',
            'f',
            'g',
            'h',
            'j',
            'k',
            'l',
            ';',
            '\'',
			'`', 
            '\0',// Lshift
			'\\',
            'z',
            'x',
            'c',
            'v',
            'b',
            'n',
            'm',
            ',',
            '.',
            '/',
            '\0' //Rshift
        };

        unsigned char ret = ScancodeTabel[Scancode];


        if(ret == 0) {/* TODO: ADD ERROR - HANDLE CODE */}

        return ret;
    }


    //IDT///////////////////////////////////////////
    struct idt
    {
        short limit;
        unsigned int base;
    }__attribute__ ((packed));
    struct idt_entry
    {
        short base_low;
        short select;
        char always0;
        char flags;
        short base_high;
    }__attribute__ ((packed));
    struct idt Tidt;
    struct idt_entry _idt_entries[256];
    #define IDTBASE    0x00000000
    #define IDTSIZE 0xFF

    typedef struct {
        /* Pushed explicitly in our common stub code */
        uint32_t gs, fs, es, ds;
        /* Pushed in our stub code by pushad instruction */
        uint32_t edi, esi, ebp, esp, ebx, edx, ecx, eax;
        uint32_t int_num;         /* Interrupt number */
        uint32_t err_code;        /* Error Code */
        uint32_t eip, cs, eflags; /* Pushed by processor */
        uint32_t usersp, userss;  /* Pushed by procssor in some circumstances */
    } interrupt_frame_t;

    /* Common body for interrupt handler */
    #define MAKE_INTERRUPT_COMMON_STUB(intno, intfunc) \
                "push $"#intno"\n\t" \
                "pusha\n\t" \
                "push %ds\n\t" \
                "push %es\n\t" \
                "push %fs\n\t" \
                "push %gs\n\t" \
                "mov $0x10, %eax\n\t"   /* Set the segments to kernel data selector*/ \
                "mov %eax, %ds\n\t" \
                "mov %eax, %es\n\t" \
                "mov %eax, %fs\n\t" \
                "mov %eax, %gs\n\t" \
                "cld\n\t" \
                "push %esp\n\t" \
                "call _" #intfunc "\n\t" \
                "pop %eax\n\t" \
                "pop %gs\n\t" \
                "pop %fs\n\t" \
                "pop %es\n\t" \
                "pop %ds\n\t" \
                "popa\n\t" \
                "add $8, %esp\n\t"       /* Skip int_num and err_code */ \
                "iret\n\t" \
                "#.popsection\n\t"

    /* Make interrupt for exception without error code. Push a dummy value for the
     * error code in it place. Push all the segment registers and the segment registers
     * so that they are available to interrupt function (intfun). Pushes a unique
     * interrupt number (intno) after the error code so that a handler can be multiplexed
     * if needed. Restore all the registers upon exit.
     *
     * intentry: Is the interrupt entry point that can be used in an Interrupt
     *           Descriptor Table (IDT) entry.
     * intfunc:  Is the C interrupt function that the stub calls to do processing
     * intno:    Interrupt number. Can be used to multiplex multiple interrupts to one
     *           intfunc handler.
     */
    #define MAKE_INTERRUPT(intentry, intfunc, intno) \
        extern void intentry (void); \
        __asm__("#.pushsection .text\n\t" \
                ".global _" #intentry "\n\t" \
                ".align 16\n\t" \
                "_" #intentry ":\n\t" \
                "push $0\n\t"            /* Push dummy error code */ \
                MAKE_INTERRUPT_COMMON_STUB(intno, intfunc));

    /* Make interrupt for exception with error code. Processor pushes the error code
     * after the return address automatically. Push all the segment registers and the
     * segment registers so that they are available to interrupt function (intfun).
     * Pushes a unique interrupt number (intno) after the error code so that a handler
     * can be multiplexed if needed. Restore all the registers upon exit.
     *
     * intentry: Is the interrupt entry point that can be used in an Interrupt
     *           Descriptor Table (IDT) entry.
     * intfunc:  Is the C interrupt function that the stub calls to do processing
     * intno:    Interrupt number. Can be used to multiplex multiple interrupts to one
     *           intfunc handler.
    */
    #define MAKE_INTERRUPT_ERRCODE(intentry, intfunc, intno) \
        extern void intentry (void); \
        __asm__("#.pushsection .text\n\t" \
                ".global _" #intentry "\n" \
                ".align 16\n\t" \
                "_" #intentry ":\n\t" \
                MAKE_INTERRUPT_COMMON_STUB(intno, intfunc));

    MAKE_INTERRUPT        (isr0,  isr0_handler,  0x00)
    MAKE_INTERRUPT        (isr1,  isr1_handler,  0x01)
    MAKE_INTERRUPT        (isr2,  isr2_handler,  0x02)
    MAKE_INTERRUPT        (isr3,  isr3_handler,  0x03)
    MAKE_INTERRUPT        (isr4,  isr4_handler,  0x04)
    MAKE_INTERRUPT        (isr5,  isr5_handler,  0x05)
    MAKE_INTERRUPT        (isr6,  isr6_handler,  0x06)
    MAKE_INTERRUPT        (isr7,  isr7_handler,  0x07)
    MAKE_INTERRUPT_ERRCODE(isr8,  isr8_handler,  0x08)
    MAKE_INTERRUPT        (isr9,  isr9_handler,  0x09)
    MAKE_INTERRUPT_ERRCODE(isr10, isr10_handler, 0x0a)
    MAKE_INTERRUPT_ERRCODE(isr11, isr11_handler, 0x0b)
    MAKE_INTERRUPT_ERRCODE(isr12, isr12_handler, 0x0c)
    MAKE_INTERRUPT_ERRCODE(isr13, isr13_handler, 0x0d)
    MAKE_INTERRUPT_ERRCODE(isr14, isr14_handler, 0x0e)
    /* Reserved 0x0f */
    MAKE_INTERRUPT        (isr16, isr0_handler,  0x10)
    MAKE_INTERRUPT_ERRCODE(isr17, isr0_handler,  0x11)
    MAKE_INTERRUPT        (isr18, isr0_handler,  0x12)
    MAKE_INTERRUPT        (isr19, isr0_handler,  0x13)
    MAKE_INTERRUPT        (isr20, isr0_handler,  0x14)
    /* Reserved 0x15 to 0x1d */
    MAKE_INTERRUPT_ERRCODE(isr30, isr0_handler,  0x1e)
    /* Reserved 0x1f */

    /* IRQ handlers */
    MAKE_INTERRUPT        (irq0,  irq0_handler,         0x00)
    MAKE_INTERRUPT        (irq1,  irq1_handler,         0x01)
    MAKE_INTERRUPT        (irq2,  default_irq_handler,  0x02)
    MAKE_INTERRUPT        (irq3,  default_irq_handler,  0x03)
    MAKE_INTERRUPT        (irq4,  default_irq_handler,  0x04)
    MAKE_INTERRUPT        (irq5,  default_irq_handler,  0x05)
    MAKE_INTERRUPT        (irq6,  default_irq_handler,  0x06)
    MAKE_INTERRUPT        (irq7,  default_irq_handler,  0x07)
    MAKE_INTERRUPT        (irq8,  default_irq_handler,  0x08)
    MAKE_INTERRUPT        (irq9,  default_irq_handler,  0x09)
    MAKE_INTERRUPT        (irq10, default_irq_handler,  0x0A)
    MAKE_INTERRUPT        (irq11, default_irq_handler,  0x0B)
    MAKE_INTERRUPT        (irq12, default_irq_handler,  0x0C)
    MAKE_INTERRUPT        (irq13, default_irq_handler,  0x0D)
    MAKE_INTERRUPT        (irq14, default_irq_handler,  0x0E)
    MAKE_INTERRUPT        (irq15, default_irq_handler,  0x0F)

    void init_idt_entry(int num, unsigned int offset, unsigned short select, 
        unsigned short flags)
        {
            _idt_entries[num].base_low = (offset & 0xffff);
            _idt_entries[num].base_high =  (offset & 0xffff0000) >> 16;
            _idt_entries[num].always0 = 0;
            _idt_entries[num].flags = flags;
            _idt_entries[num].select = select;
             return;
        }

    void isr0_handler(interrupt_frame_t *frame)
    {
        set_background(0xff0000);
    }

    void isr1_handler(interrupt_frame_t *frame)
    {
        set_background( 0xff0000);
    }

    void isr2_handler(interrupt_frame_t *frame)
    {
        set_background( 0xff0000);
    }
    void isr3_handler(interrupt_frame_t *frame)
    {
        set_background( 0xff0000);
    }
    void isr4_handler(interrupt_frame_t *frame)
    {
       set_background( 0xff0000);
    }
    void isr5_handler(interrupt_frame_t *frame)
    {
       set_background( 0xff0000);
    }
    void isr6_handler(interrupt_frame_t *frame)
    {
        set_background( 0xff0000);
    }
    void isr7_handler(interrupt_frame_t *frame)
    {
       set_background( 0xff0000);
    }
    void isr8_handler(interrupt_frame_t *frame)
    {
    set_background( 0xff0000);
    }
    void isr9_handler(interrupt_frame_t *frame)
    {
       set_background( 0xff0000);
    }
    void isr10_handler(interrupt_frame_t *frame)
    {
       set_background( 0xff0000);
    }
    void isr11_handler(interrupt_frame_t *frame)
    {
        set_background( 0xff0000);
    }
    void isr12_handler(interrupt_frame_t *frame)
    {
        set_background( 0xff0000);
    }
    void isr13_handler(interrupt_frame_t *frame)
    {
        set_background( 0xff0000);
    }
    void isr14_handler(interrupt_frame_t *frame)
    {
       set_background( 0xff0000);
    }
	
	
    void default_irq_handler(interrupt_frame_t *frame)
    {
       

        /* If IRQ # on slave PIC send EOI to slave */
        if (frame->int_num >= 8)
            outb(0xA0,0x20);

        /* Send EOI to master PIC */
        outb(0x20,0x20);
    }

	// IRQ 0 and PIT
	
	void SetPITSpeed(int hz)
	{
		int divisor = 1193180 / hz;       /* Calculate our divisor */
		outb(0x43, 0x36);             /* Set our command byte 0x36 */
		outb(0x40, divisor & 0xFF);   /* Set low byte of divisor */
		outb(0x40, divisor >> 8);     /* Set high byte of divisor */
	}

	
	int TickCount;
	void irq0_handler(interrupt_frame_t *frame)
	{
		TickCount++;
		default_irq_handler(frame);
	}
	
	void TSleep(int ticks)
	{
		int now = TickCount;
		
		while(TickCount != now + ticks);
		
		
		return;
		
		
		
	}
	
	/////////////////////////////////////////////////
	int _i = 0;
	void irq1_handler(interrupt_frame_t *frame)
	{
		asm("cli");
		unsigned char scan_code = inb(0x60);
		
		if((scan_code & 128) == 128)// Key Released
		{
			wait_key_var = 0; // geçici
			
			default_irq_handler(frame);
		}        
        else //Key Pressed
		{ 
				   
			wait_key_var = 1; // geçici
			
			//set_background((unsigned char*)0xA0000, 0xff0000);
			//else set_background((unsigned char*)0xA0000, 0x8);
			_i++;
			
			char ch = MapScancodeToAscii(scan_code);
			drawchar(ch,256,16,0xffffff, 0x000000);
			asm("sti");
			default_irq_handler(frame);
		}
	}
	
	//mouse
	
	///////////////////////////////////////
    void idt_flush(struct idt *idtr)
    {
        asm volatile("lidt %0" :: "m"(*idtr));
    }

    void init_pic()
    {

        outb(0x20,0x11);
        outb(0xA0,0x11);

        outb(0x21, 0x20);
        outb(0xA1, 40);

        outb(0x21, 0x04);
        outb(0xA1, 0x02);

        outb(0x21, 0x01);
        outb(0xA1, 0x01);

        outb(0x21, 0x0);
        outb(0xA1, 0x0);

		
    }


    void init_idt()
    {
        init_pic();
        Tidt.limit = 8 * 256;
        Tidt.base  = (int)&_idt_entries;


        memset(&_idt_entries, 0, 8*256);

        for(int i = 0; i < 256 ; i++){
            init_idt_entry(i,(int)&isr0,0x08, 0x8E); 
        }

        init_idt_entry(0,(int)&isr0,0x08, 0x8E);
        init_idt_entry(1,(int)&isr1,0x08, 0x8E);
        init_idt_entry(2,(int)&isr2,0x08, 0x8E);
        init_idt_entry(3,(int)&isr3,0x08, 0x8E);
        init_idt_entry(4,(int)&isr4,0x08, 0x8E);
        init_idt_entry(5,(int)&isr5,0x08, 0x8E);
        init_idt_entry(6,(int)&isr6,0x08, 0x8E);
        init_idt_entry(7,(int)&isr7,0x08, 0x8E);
        init_idt_entry(8,(int)&isr8,0x08, 0x8E);
        init_idt_entry(9,(int)&isr9,0x08, 0x8E);
        init_idt_entry(10,(int)&isr10,0x08, 0x8E);
        init_idt_entry(11,(int)&isr11,0x08, 0x8E);
        init_idt_entry(12,(int)&isr12,0x08, 0x8E);
        init_idt_entry(13,(int)&isr13,0x08, 0x8E);
        init_idt_entry(14,(int)&isr14,0x08, 0x8E);
        /* ISR15 is reserved */
        init_idt_entry(16,(int)&isr16,0x08, 0x8E);
        init_idt_entry(17,(int)&isr17,0x08, 0x8E);
        init_idt_entry(18,(int)&isr18,0x08, 0x8E);
        init_idt_entry(19,(int)&isr19,0x08, 0x8E);
        init_idt_entry(20,(int)&isr20,0x08, 0x8E);
        /* ISR21 to ISR2F are reserved */
        init_idt_entry(30,(int)&isr30,0x08, 0x8E);

        /* IRQ handlers */
        init_idt_entry(32,(int)&irq0,0x08, 0x8E);
        init_idt_entry(33,(int)&irq1,0x08, 0x8E);
        init_idt_entry(34,(int)&irq2,0x08, 0x8E);
        init_idt_entry(35,(int)&irq3,0x08, 0x8E);
        init_idt_entry(36,(int)&irq4,0x08, 0x8E);
        init_idt_entry(37,(int)&irq5,0x08, 0x8E);
        init_idt_entry(38,(int)&irq6,0x08, 0x8E);
        init_idt_entry(39,(int)&irq7,0x08, 0x8E);
        init_idt_entry(40,(int)&irq8,0x08, 0x8E);
        init_idt_entry(41,(int)&irq9,0x08, 0x8E);
        init_idt_entry(42,(int)&irq10,0x08, 0x8E);
        init_idt_entry(43,(int)&irq11,0x08, 0x8E);
        init_idt_entry(44,(int)&irq12,0x08, 0x8E);
        init_idt_entry(45,(int)&irq13,0x08, 0x8E);
        init_idt_entry(46,(int)&irq14,0x08, 0x8E);
        init_idt_entry(47,(int)&irq15,0x08, 0x8E);

        idt_flush(&Tidt);

        asm volatile("sti;");
    }


#endif